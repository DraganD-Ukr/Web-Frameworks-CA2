@using Components.Models
@using WebFrameworks_CA2.Components.Models.Movie
@using WebFrameworks_CA2.Components.MovieComponents

@page "/movies"
@attribute [StreamRendering]
@rendermode InteractiveServer

@inject ILogger<String> Logger
@inject IJSRuntime JsRuntime

<PageTitle>Movies</PageTitle>

<div class="container mt-4" @ref="containerElement" style="overflow-y: auto; height: 80vh;">
    <h1 class="mb-4 text-center">Find Your Movie to Watch!</h1>
    <p class="text-center">Search for different movies on this page!</p>

    <!-- Search Bar -->
    <div class="row justify-content-center mb-3">
        <div class="col-auto">
            <div class="input-group">
                <input
                    type="text"
                    class="form-control form-control-sm"
                    placeholder="Search for movies..."
                    @bind="SearchTerm"
                    @bind:event="oninput"
                    style="max-width: 200px;"/>
                <button class="btn btn-primary btn-sm" @onclick="SearchMovies">Search</button>
            </div>
        </div>
    </div>

    <!-- Results Section -->
    @if (isLoading && CurrentPage == 1) {
        <p class="text-center text-secondary">Loading movies...</p>
    }
    else if (MovieList.Count == 0 && !isLoading && string.IsNullOrEmpty(ErrorMessage)) {
        <p class="text-center text-muted">No movies found. Try searching for something else!</p>
    }
    else if (!string.IsNullOrEmpty(ErrorMessage)) {
        <p class="text-center text-danger">Error: @ErrorMessage</p>
    }
    else {
        <!-- MovieCardGrid component -->
        <div class="d-flex flex-column">
            <MovieCardGrid Movies="MovieList"/>

            @if (IsLoadingMore) {
                <p class="text-center text-secondary mt-3">Loading more movies...</p>
            }
            else if (AllMoviesLoaded) {
                <p class="text-center text-muted mt-3">No more movies to load!</p>
            }
        </div>
    }
</div>

@code {
    private string SearchTerm = string.Empty;
    private List<OmdbMovie> MovieList = new();
    private bool isLoading = false;
    private string ErrorMessage = string.Empty;

// Infinite scrolling variables
    private int CurrentPage = 1;
    private bool AllMoviesLoaded = false;
    private bool IsLoadingMore = false;
    private ElementReference containerElement;
    
    /// <summary>
    /// Triggers the JavaScript scroll initialization only once after the component is first rendered.
    /// </summary>
    protected override async Task OnAfterRenderAsync(bool firstRender) {
        if (firstRender) {
            await JsRuntime.InvokeVoidAsync("initializeScroll", DotNetObjectReference.Create(this), containerElement);
        }
    }

    /// <summary>
    /// Event trigger to call FetchMoviesAsync when user scrolls to bottom of the movie page.
    /// </summary>
    [JSInvokable]
    public async Task OnScrollToBottom() {
        Logger.LogDebug("Scroll reached bottom, fetching more movies...");
        await FetchMoviesAsync(CurrentPage);
    }

    /// <summary>
    /// Handles search logic and validation for the movies.
    /// </summary>
    private async Task SearchMovies() {
        if (!string.IsNullOrWhiteSpace(SearchTerm)) {
// Reset state for a new search
            isLoading = true;
            ErrorMessage = string.Empty;
            MovieList.Clear();
            CurrentPage = 1;
            AllMoviesLoaded = false;

            Logger.LogInformation("Searching for movies with term: {SearchTerm}", SearchTerm);
            await FetchMoviesAsync(CurrentPage);
            isLoading = false;
        }
    }

    /// <summary>
    /// Fetches movie from the OMDB API with provided search term and page.
    /// Fetches movies asynchronously, updates the MovieList and UI state.
    /// </summary>
    /// <param name="page">Page of found results.</param>
    private async Task FetchMoviesAsync(int page) {
        if (IsLoadingMore || AllMoviesLoaded) {
            Logger.LogDebug("Skipping fetch, isLoadingMore: {isLoadingMore}, AllMoviesLoaded: {AllMoviesLoaded}", IsLoadingMore, AllMoviesLoaded);
            return;
        }

        IsLoadingMore = true; // Set to true to indicate that a fetch is in progress
        Logger.LogDebug("Fetching movies for page: {Page}", page);

        var apiKey = Environment.GetEnvironmentVariable("OMDB_API_KEY"); //Getting the API key from the environment variables
        if (string.IsNullOrEmpty(apiKey)) {
            Logger.LogError("API key is not set in the environment variables.");
            throw new InvalidOperationException("API key is not set in the environment variables.");
        }
        
        // Actual API call to fetch movies
        var client = new HttpClient();
        var response = await client.GetAsync($"https://www.omdbapi.com/?s={SearchTerm}&page={page}&apikey={apiKey}");

        // Check if the response is successful    
        if (response.IsSuccessStatusCode) {
            var result = await response.Content.ReadFromJsonAsync<OmdbSearchResponse>();
            
            // Check if the response is valid
            if (result?.Response == "False" || result?.Search == null) {
                AllMoviesLoaded = true; // No more movies to load
                Logger.LogDebug("No more movies found for page: {Page}", page);
            }
            else {
                // Add the fetched movies to the list
                MovieList.AddRange(result.Search.Select(m => new OmdbMovie {
                    ImdbID = m.ImdbID,
                    Title = m.Title,
                    Year = m.Year,
                    Type = m.Type,
                    Poster = m.Poster
                }));
                CurrentPage++; // Increment the page number
                StateHasChanged(); // Trigger re-render to update the UI
            }
        }
        else {
            Logger.LogWarning("Failed to fetch movies for page: {Page}. Status code: {StatusCode}", page, response.StatusCode);
        }

        // Reset isLoadingMore after fetching is complete
        IsLoadingMore = false;

        // Force re-render to reflect the correct "No more movies" state
        StateHasChanged();
    }

}

<script>
    function initializeScroll(dotNetHelper, containerElement) {
        console.log("Scroll initialization triggered");
        containerElement.addEventListener('scroll', () => {
            const scrollTop = containerElement.scrollTop;
            const scrollHeight = containerElement.scrollHeight;
            const clientHeight = containerElement.clientHeight;

            console.log(`scrollTop: ${scrollTop}, scrollHeight: ${scrollHeight}, clientHeight: ${clientHeight}`);
            if (scrollTop + clientHeight >= scrollHeight - 10) {
                dotNetHelper.invokeMethodAsync('OnScrollToBottom');
            }
        });
    }
</script>