@using Components.Models

@page "/movies"
@attribute [StreamRendering]
@rendermode InteractiveServer

@inject ILogger<String> Logger

<PageTitle>Movies</PageTitle>

<h1>Find your movie to watch!</h1>

<p>You can search for different movies on this page!</p>

<!-- Search Bar -->
<div>
    <p>Current search term: @SearchTerm</p>
    <input @bind="SearchTerm" @bind:event="oninput" placeholder="Search for movies..." />
    <button @onclick="SearchMovies">Search</button>
</div>

<!-- Results Section -->
@if (isLoading) {
    <p>Loading movies...</p>
}
else if (MovieList.Count == 0 && !isLoading && string.IsNullOrEmpty(ErrorMessage)) {
    <p>No movies found. Try searching for something else!</p>
}
else if (!string.IsNullOrEmpty(ErrorMessage)) {
    <p style="color:red;">Error: @ErrorMessage</p>
}
else {
    <div>
        <h3>Search Results:</h3>
        <ul>
            @foreach (var movie in MovieList) {
                <li>
                    <strong>@movie.Title</strong> (@movie.Year) 
                </li>
            }
        </ul>
    </div>
}

@code {
    private string SearchTerm = string.Empty;
    private List<Movie> MovieList = new();
    private bool isLoading = false;
    private string ErrorMessage = string.Empty;

    private async Task SearchMovies() {
        if (!string.IsNullOrWhiteSpace(SearchTerm)) {
            isLoading = true;
            ErrorMessage = string.Empty; // Reset any previous error message
            Logger.LogInformation("Searching for movies with term: {SearchTerm}", SearchTerm);
            MovieList = await FetchMoviesAsync(SearchTerm);
            isLoading = false;
        }
    }

    private async Task<List<Movie>> FetchMoviesAsync(string searchTerm) {
        Logger.LogDebug("SearchMovies method was called."); 

        var apiKey = Environment.GetEnvironmentVariable("OMDB_API_KEY");

        Logger.LogDebug("Retrieved API Key: {ApiKey}", apiKey);

        if (string.IsNullOrEmpty(apiKey)) {
            Logger.LogError("API key is not set in the environment variables.");
            throw new InvalidOperationException("API key is not set in the environment variables.");
        }

        var client = new HttpClient();
        var response = await client.GetAsync($"https://www.omdbapi.com/?s={searchTerm}&apikey={apiKey}");

        if (response.IsSuccessStatusCode) {
            var result = await response.Content.ReadFromJsonAsync<OmdbSearchResponse>();
            Logger.LogInformation("Movies fetched successfully.");

            // Check if the response is "False" indicating an error or no movies found
            if (result?.Response == "False") {
                ErrorMessage = result?.Error ?? "An unknown error occurred.";
                return new List<Movie>(); // No movies found or API error
            }

            return result.Search.Select(m => new Movie {
                Title = m.Title,
                Year = m.Year,
                Type = m.Type // Requires additional API calls for movie details
            }).ToList();
        }

        Logger.LogWarning("Failed to fetch movies. Status code: {StatusCode}", response.StatusCode);
        ErrorMessage = "Failed to fetch movies from the API.";
        return new List<Movie>();
    }





    
}
