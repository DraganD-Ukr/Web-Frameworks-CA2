@using Components.Models
@using WebFrameworks_CA2.Components.MovieComponents

@page "/movies"
@attribute [StreamRendering]
@rendermode InteractiveServer

@inject ILogger<String> Logger

<PageTitle>Movies</PageTitle>

<div class="container mt-4">
    <h1 class="mb-4 text-center">Find Your Movie to Watch!</h1>
    <p class="text-center">Search for different movies on this page!</p>

    <!-- Search Bar -->
    <div class="input-group mb-3">
        <input
            type="text"
            class="form-control"
            placeholder="Search for movies..."
            @bind="SearchTerm"
            @bind:event="oninput"/>
        <button class="btn btn-primary" @onclick="SearchMovies">Search</button>
    </div>

    <!-- Results Section -->
    @if (isLoading) {
        <p class="text-center text-secondary">Loading movies...</p>
    }
    else if (MovieList.Count == 0 && !isLoading && string.IsNullOrEmpty(ErrorMessage)) {
        <p class="text-center text-muted">No movies found. Try searching for something else!</p>
    }
    else if (!string.IsNullOrEmpty(ErrorMessage)) {
        <p class="text-center text-danger">Error: @ErrorMessage</p>
    }
    else {
        <!-- MovieCardGrid component -->
        <div class="d-flex flex-column">
            <MovieCardGrid Movies="MovieList"/>
        </div>
    }
</div>

@code {
    private string SearchTerm = string.Empty;
    private List<OmdbMovie> MovieList = new();
    private bool isLoading = false;
    private string ErrorMessage = string.Empty;

    private async Task SearchMovies() {
        if (!string.IsNullOrWhiteSpace(SearchTerm)) {
            isLoading = true;
            ErrorMessage = string.Empty;
            Logger.LogInformation("Searching for movies with term: {SearchTerm}", SearchTerm);
            MovieList = await FetchMoviesAsync(SearchTerm);
            isLoading = false;
        }
    }

    private async Task<List<OmdbMovie>> FetchMoviesAsync(string searchTerm) {
        Logger.LogDebug("SearchMovies method was called.");

        var apiKey = Environment.GetEnvironmentVariable("OMDB_API_KEY");

        Logger.LogDebug("Retrieved API Key: {ApiKey}", apiKey);

        if (string.IsNullOrEmpty(apiKey)) {
            Logger.LogError("API key is not set in the environment variables.");
            throw new InvalidOperationException("API key is not set in the environment variables.");
        }

        var client = new HttpClient();
        var response = await client.GetAsync($"https://www.omdbapi.com/?s={searchTerm}&apikey={apiKey}");

        if (response.IsSuccessStatusCode) {
            var result = await response.Content.ReadFromJsonAsync<OmdbSearchResponse>();
            Logger.LogInformation("Movies fetched successfully.");

            if (result?.Response == "False") {
                ErrorMessage = result?.Error ?? "An unknown error occurred.";
                return new List<OmdbMovie>();
            }

            return result.Search.Select(m => new OmdbMovie {
                ImdbID = m.ImdbID,
                Title = m.Title,
                Year = m.Year,
                Type = m.Type,
                Poster = m.Poster
            }).ToList();
        }

        Logger.LogWarning("Failed to fetch movies. Status code: {StatusCode}", response.StatusCode);
        ErrorMessage = "Failed to fetch movies from the API.";
        return new List<OmdbMovie>();
    }

}