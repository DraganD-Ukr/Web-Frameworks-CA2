@using Models.Cinema
@using WebFrameworks_CA2.Components.Service

@page "/cinemas"
@inject IJSRuntime JSRuntime
@inject ILogger<String> Logger
@rendermode InteractiveServer
@inject CinemaService CinemaService

<PageTitle>Cinemas Nearby</PageTitle>

<div class="d-flex flex-column align-items-center">
    <h3>Get Nearby Cinemas</h3>
</div>


<div class="d-flex flex-column align-items-center mt-3">
    <!-- Radius slider -->
    <label for="radius" class="form-label text-center">Adjust Search Radius</label>
    <input type="range" id="radius" @bind="Radius"
           min="1000" max="50000" step="100"
           class="form-range w-50"/>
    <span class="form-text mt-2">Selected Radius: <strong>@Radius</strong> meters</span>

    <!-- Button and text under slider -->
    <button class="btn btn-primary mt-3" @onclick="GetLocation">Get My Location</button>

    @if (!string.IsNullOrEmpty(errorMessage)) {
        <div class="alert alert-warning mt-3">
            <p>@errorMessage</p>
        </div>
    }
</div>

@if (cinemas != null && cinemas.Any()) {
    <h4 class="mt-4">Nearby Cinemas</h4>

    <ul class="list-group" style="padding-top: 20px;">

        @foreach (var cinema in cinemas) {
            <li class="list-group-item" style="margin-bottom: 20px;">
                <h4>@cinema.Name</h4>
                <span style="display: block; font-size: 1.1rem; color: #555; margin-top: 8px;">Address: @cinema.Address</span>
                <br/>
                @if (cinema.Rating.HasValue) {
                    <span class="badge bg-info">Rating: @cinema.Rating</span>
                }
                <br/>
                @if (cinema.UserRatingsCount.HasValue) {
                    <span class="badge bg-secondary">Reviews: @cinema.UserRatingsCount</span>
                }
                <br/>
                @if (!string.IsNullOrEmpty(cinema.GoogleLink)) {
                    <a href="@cinema.GoogleLink" target="_blank" class="btn btn-link">View on Google</a>
                }
            </li>
        }

    </ul>
}

@code {
    private double? _latitude;
    private double? _longitude;
    private string errorMessage;
    private List<Cinema> cinemas;

    private int _radius = 5000; // Default radius in meters (5km)

    private int Radius {
        get => _radius;
        set => _radius = value;
    }

    /// <summary>
    /// Retrieves the user's current geolocation (latitude and longitude) and fetches nearby cinemas based on the user's specified radius.
    /// </summary>
    /// <returns>
    /// A task representing the asynchronous operation of obtaining the user's location
    /// and retrieving nearby cinemas.
    /// </returns>
    /// <remarks>
    /// This method uses the JavaScript geolocation API to get the user's current coordinates 
    /// and then fetches nearby cinemas within the specified radius by invoking another method.
    /// </remarks>
    /// <exception cref="Exception">
    /// Thrown when there is an error retrieving the user's location or when the geolocation 
    /// API fails to provide coordinates.
    /// </exception>
    private async Task GetLocation() {
        try {
            Logger.LogInformation("Getting location info..");
            var location = await JSRuntime.InvokeAsync<Location>("getGeolocation");

            Logger.LogInformation($"Geolocation retrieved: Latitude: {location.Latitude}, Longitude: {location.Longitude}");

            _latitude = location.Latitude;
            _longitude = location.Longitude;
            errorMessage = null;

            await FetchNearbyCinemas(_latitude.Value, _longitude.Value, Radius);
        }
        catch (Exception ex) {
            errorMessage = "Error getting geolocation: " + ex.Message;
            Logger.LogError($"Error getting geolocation: {ex.Message}");
        }
    }


    
    /// <summary>
    /// Fetches a list of nearby cinemas using the Google Places API.
    /// </summary>
    /// <param name="lat">The latitude of the user's current location.</param>
    /// <param name="lon">The longitude of the user's current location.</param>
    /// <param name="radius">The search radius in meters within which cinemas should be found.</param>
    /// <returns>A task that represents the asynchronous operation. 
    /// If successful, populates the list of nearby cinemas.</returns>
    /// <remarks>
    /// This method sends an HTTP GET request to the Google Places API
    /// to fetch cinema details based on the provided location and radius.
    /// The results are deserialized and mapped to the <see cref="Cinema"/> model.
    /// </remarks>
    /// <exception cref="Exception">
    /// Thrown when there is an error fetching or processing the API response.
    /// The exception message contains additional details about the error.
    /// </exception>
    private async Task FetchNearbyCinemas(double lat, double lon, int radius)
    {
        try
        {
            Logger.LogInformation("Fetching nearby cinemas...");
            cinemas = await CinemaService.GetNearbyCinemasAsync(lat, lon, radius);

            if (!cinemas.Any())
            {
                errorMessage = "No cinemas found within the specified radius.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = "Error fetching cinemas: " + ex.Message;
            Logger.LogError($"Error fetching cinemas: {ex.Message}");
        }
    }

    
    public class Location {
        public double Latitude { get; set; }
        public double Longitude { get; set; }
    }


}

<!-- Function to get the user's geolocation -->
<script>
    window.getGeolocation = function() {
        return new Promise((resolve, reject) => {
            if (navigator.geolocation) {
                navigator.geolocation.getCurrentPosition(function(position) {
                    resolve({
                        latitude: position.coords.latitude,
                        longitude: position.coords.longitude
                    });
                }, function(error) {
                    reject("Geolocation error: " + error.message);
                });
            } else {
                reject("Geolocation is not supported by this browser.");
            }
        });
    }
</script>